// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: connect.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "Connect.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ConnectAckMsgBody);
GPBObjCClassDeclaration(ConnectMsgBody);
GPBObjCClassDeclaration(DisconnectMsgBody);
GPBObjCClassDeclaration(ImWebsocketMsg);
GPBObjCClassDeclaration(PublishAckMsgBody);
GPBObjCClassDeclaration(PublishMsgBody);
GPBObjCClassDeclaration(QueryAckMsgBody);
GPBObjCClassDeclaration(QueryConfirmMsgBody);
GPBObjCClassDeclaration(QueryMsgBody);

#pragma mark - ConnectRoot

@implementation ConnectRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ConnectRoot_FileDescription = {
  .package = NULL,
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ConnectMsgBody

@implementation ConnectMsgBody

@dynamic protoId;
@dynamic sdkVersion;
@dynamic appkey;
@dynamic token;
@dynamic deviceId;
@dynamic platform;
@dynamic deviceCompany;
@dynamic deviceModel;
@dynamic deviceOsVersion;
@dynamic pushToken;
@dynamic networkId;
@dynamic ispNum;
@dynamic clientIp;
@dynamic packageName;
@dynamic pushChannel;
@dynamic ext;
@dynamic instanceId;
@dynamic language;
@dynamic isBackend;

typedef struct ConnectMsgBody__storage_ {
  uint32_t _has_storage_[1];
  NSString *protoId;
  NSString *sdkVersion;
  NSString *appkey;
  NSString *token;
  NSString *deviceId;
  NSString *platform;
  NSString *deviceCompany;
  NSString *deviceModel;
  NSString *deviceOsVersion;
  NSString *pushToken;
  NSString *networkId;
  NSString *ispNum;
  NSString *clientIp;
  NSString *packageName;
  NSString *pushChannel;
  NSString *ext;
  NSString *instanceId;
  NSString *language;
} ConnectMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "protoId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_ProtoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, protoId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_SdkVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, sdkVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appkey",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_Appkey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, appkey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_DeviceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_Platform,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceCompany",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_DeviceCompany,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, deviceCompany),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_DeviceModel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceOsVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_DeviceOsVersion,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, deviceOsVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushToken",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_PushToken,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, pushToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "networkId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_NetworkId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, networkId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ispNum",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_IspNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, ispNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientIp",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_ClientIp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, clientIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packageName",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_PackageName,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, packageName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_PushChannel,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, pushChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ext",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_Ext,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, ext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "instanceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_InstanceId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, instanceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_Language,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ConnectMsgBody__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isBackend",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectMsgBody_FieldNumber_IsBackend,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConnectMsgBody)
                                   messageName:@"ConnectMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\r\001\007\000\002\n\000\005\010\000\007\r\000\010\013\000\t\017\000\n\t\000\013\t\000\r\010\000\016\013\000\017\013\000\021\n\000\023\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConnectAckMsgBody

@implementation ConnectAckMsgBody

@dynamic code;
@dynamic userId;
@dynamic session;
@dynamic timestamp;
@dynamic ext;

typedef struct ConnectAckMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *userId;
  NSString *session;
  NSString *ext;
  int64_t timestamp;
} ConnectAckMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectAckMsgBody_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectAckMsgBody__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectAckMsgBody_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnectAckMsgBody__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "session",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectAckMsgBody_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnectAckMsgBody__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectAckMsgBody_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnectAckMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ext",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectAckMsgBody_FieldNumber_Ext,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ConnectAckMsgBody__storage_, ext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConnectAckMsgBody)
                                   messageName:@"ConnectAckMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectAckMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002\006\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DisconnectMsgBody

@implementation DisconnectMsgBody

@dynamic code;
@dynamic timestamp;
@dynamic ext;

typedef struct DisconnectMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *ext;
  int64_t timestamp;
} DisconnectMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = DisconnectMsgBody_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DisconnectMsgBody__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = DisconnectMsgBody_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DisconnectMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ext",
        .dataTypeSpecific.clazz = Nil,
        .number = DisconnectMsgBody_FieldNumber_Ext,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DisconnectMsgBody__storage_, ext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DisconnectMsgBody)
                                   messageName:@"DisconnectMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DisconnectMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PublishMsgBody

@implementation PublishMsgBody

@dynamic index;
@dynamic topic;
@dynamic targetId;
@dynamic timestamp;
@dynamic data_p;

typedef struct PublishMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  NSString *topic;
  NSString *targetId;
  NSData *data_p;
  int64_t timestamp;
} PublishMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishMsgBody_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PublishMsgBody__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topic",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishMsgBody_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PublishMsgBody__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishMsgBody_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PublishMsgBody__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishMsgBody_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PublishMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishMsgBody_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PublishMsgBody__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PublishMsgBody)
                                   messageName:@"PublishMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PublishMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\003\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PublishAckMsgBody

@implementation PublishAckMsgBody

@dynamic index;
@dynamic code;
@dynamic msgId;
@dynamic timestamp;
@dynamic msgSeqNo;
@dynamic memberCount;
@dynamic clientMsgId;

typedef struct PublishAckMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t code;
  int32_t memberCount;
  NSString *msgId;
  NSString *clientMsgId;
  int64_t timestamp;
  int64_t msgSeqNo;
} PublishAckMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgSeqNo",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_MsgSeqNo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, msgSeqNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_MemberCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clientMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = PublishAckMsgBody_FieldNumber_ClientMsgId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PublishAckMsgBody__storage_, clientMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PublishAckMsgBody)
                                   messageName:@"PublishAckMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PublishAckMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\004\003\005\000\005\010\000\006\013\000\007\013\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryMsgBody

@implementation QueryMsgBody

@dynamic index;
@dynamic topic;
@dynamic targetId;
@dynamic timestamp;
@dynamic data_p;

typedef struct QueryMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  NSString *topic;
  NSString *targetId;
  NSData *data_p;
  int64_t timestamp;
} QueryMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryMsgBody_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryMsgBody__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topic",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryMsgBody_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryMsgBody__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryMsgBody_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryMsgBody__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryMsgBody_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryMsgBody_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryMsgBody__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryMsgBody)
                                   messageName:@"QueryMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\003\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryAckMsgBody

@implementation QueryAckMsgBody

@dynamic index;
@dynamic code;
@dynamic timestamp;
@dynamic data_p;

typedef struct QueryAckMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t code;
  NSData *data_p;
  int64_t timestamp;
} QueryAckMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAckMsgBody_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryAckMsgBody__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAckMsgBody_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryAckMsgBody__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAckMsgBody_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryAckMsgBody__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAckMsgBody_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryAckMsgBody__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryAckMsgBody)
                                   messageName:@"QueryAckMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryAckMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConfirmMsgBody

@implementation QueryConfirmMsgBody

@dynamic index;

typedef struct QueryConfirmMsgBody__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} QueryConfirmMsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConfirmMsgBody_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConfirmMsgBody__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConfirmMsgBody)
                                   messageName:@"QueryConfirmMsgBody"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConfirmMsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImWebsocketMsg

@implementation ImWebsocketMsg

@dynamic testofOneOfCase;
@dynamic version;
@dynamic cmd;
@dynamic qos;
@dynamic payload;
@dynamic connectMsgBody;
@dynamic connectAckMsgBody;
@dynamic disconnectMsgBody;
@dynamic publishMsgBody;
@dynamic pubAckMsgBody;
@dynamic qryMsgBody;
@dynamic qryAckMsgBody;
@dynamic qryConfirmMsgBody;

typedef struct ImWebsocketMsg__storage_ {
  uint32_t _has_storage_[2];
  int32_t version;
  int32_t cmd;
  int32_t qos;
  NSData *payload;
  ConnectMsgBody *connectMsgBody;
  ConnectAckMsgBody *connectAckMsgBody;
  DisconnectMsgBody *disconnectMsgBody;
  PublishMsgBody *publishMsgBody;
  PublishAckMsgBody *pubAckMsgBody;
  QueryMsgBody *qryMsgBody;
  QueryAckMsgBody *qryAckMsgBody;
  QueryConfirmMsgBody *qryConfirmMsgBody;
} ImWebsocketMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = ImWebsocketMsg_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cmd",
        .dataTypeSpecific.clazz = Nil,
        .number = ImWebsocketMsg_FieldNumber_Cmd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, cmd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "qos",
        .dataTypeSpecific.clazz = Nil,
        .number = ImWebsocketMsg_FieldNumber_Qos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, qos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = Nil,
        .number = ImWebsocketMsg_FieldNumber_Payload,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "connectMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(ConnectMsgBody),
        .number = ImWebsocketMsg_FieldNumber_ConnectMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, connectMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "connectAckMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(ConnectAckMsgBody),
        .number = ImWebsocketMsg_FieldNumber_ConnectAckMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, connectAckMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "disconnectMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(DisconnectMsgBody),
        .number = ImWebsocketMsg_FieldNumber_DisconnectMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, disconnectMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "publishMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(PublishMsgBody),
        .number = ImWebsocketMsg_FieldNumber_PublishMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, publishMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pubAckMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(PublishAckMsgBody),
        .number = ImWebsocketMsg_FieldNumber_PubAckMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, pubAckMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qryMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(QueryMsgBody),
        .number = ImWebsocketMsg_FieldNumber_QryMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, qryMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qryAckMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(QueryAckMsgBody),
        .number = ImWebsocketMsg_FieldNumber_QryAckMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, qryAckMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qryConfirmMsgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(QueryConfirmMsgBody),
        .number = ImWebsocketMsg_FieldNumber_QryConfirmMsgBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ImWebsocketMsg__storage_, qryConfirmMsgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ImWebsocketMsg)
                                   messageName:@"ImWebsocketMsg"
                               fileDescription:&ConnectRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImWebsocketMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "testof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\010\013\016\000\014Q\000\r\021\000\016\016\000\017\r\000\020\n\000\021\r\000\022\021\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ImWebsocketMsg_ClearTestofOneOfCase(ImWebsocketMsg *message) {
  GPBDescriptor *descriptor = [ImWebsocketMsg descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
